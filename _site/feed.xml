<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-22T23:34:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">leo-labbb DEVLOG</title><subtitle>awesome world</subtitle><author><name>이승호</name></author><entry><title type="html">NoSQL이란?</title><link href="http://localhost:4000/til/" rel="alternate" type="text/html" title="NoSQL이란?" /><published>2022-06-22T00:00:00+09:00</published><updated>2022-06-22T00:00:00+09:00</updated><id>http://localhost:4000/til</id><content type="html" xml:base="http://localhost:4000/til/"><![CDATA[<p>NoSQL :</p>

<p>NoSQL은 (non SQL 또는 non relational) 기존 RDBMs 형태의 관계형 데이터베이스가 아닌 다른 형태의 데이터 저장 기술을 의미하며, 관계형 데이터 베이스의 한계를 극복하기 위한 데이터 저장소의 새로운 형태로, 수평적 확장성을 갖고 있다.</p>

<p>RDBMS가 클라이언트/서버 환경에 맞는 데이터 저장기술이라면, NoSQL은 클라우드 환경에 맞는 저장 기술이다.</p>

<p>NoSQL의 특징<br />
NoSQL은 RDBMS와는 달리 데이터 간의 관계를 정의하지 않는다.
가장 큰 특징 중 하나는 관계형 데이터 베이스인 RDBMS가 데이터의 관계를 Foreign Key 등으로 정의하고 이를 이용해 Join 등의 관계형 연산을 한다고 하면, NoSQL은 데이터 간의 관계를 정의하지 않는다. 데이터 테이블은 그냥 하나의 테이블이며 각 테이블 간의 관계를 정의하지 않고 일반적으로 테이블 간의 Join도 불가능하다.
RDBMS에 비해 훨씬 더 대용량의 데이터를 저장할 수 있다.
RDBMS의 복잡도와 용량의 한계를 극복하기 위한 목적으로 등장한 만큼 페타바이트급의 대용량 데이터를 저장할 수 있다.
분산형 구조이다.
NoSQL은 기존 RDBMS와는 다르게 하나의 고성능 머신에 데이터를 저장하는 것이 아니라 일반적인 서버 수십 대를 연결해 데이터를 저장 및 처리하는 구조를 갖는다. 즉 분산형 구조를 통해 데이터를 여러 대의 서버에 분산해 저장하고 분산 시에 데이터를 상호 복제해 특정 서버에 장애가 발생했을 때에도 데이터 유실이나 서비스 중지가 없는 구조의 형태를 가진다.
고정되지 않은 테이블 스키마를 갖는다.
RDBMS와는 다르게 테이블의 스키마가 유동적이다. 데이터를 저장하는 컬럼은 각기 다른 이름과 다른 데이터 타입을 갖는 것이 허용된다.
스키마란? 데이터베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 메타데이터의 집합이다.
RDBMS 와 NoSQL의 차이
RDBMS
장점</p>

<ul>
  <li>DATA를 Column과 Row 형태로 저장</li>
  <li>데이터의 분류, 정렬, 탐색 속도가 비교적 빠름</li>
  <li>SQL 이라는 구조화 된 질의를 통해 데이터를 다룰 수 있음</li>
  <li>작업의 완전성을 보장
단점</li>
  <li>데이터의 UPDATE가 빠르다</li>
  <li>반드시 스키마 규격에 맞춰서 데이터를 다뤄야 한다.</li>
  <li>
    <p>데이터 처리에 대한 부하 발생시, 처리가 어렵다.
NoSQL
장점</p>
  </li>
  <li>데이터간의 관계를 정의 하지 않는다(테이블 간의 관계(JOIN) 불필요)</li>
  <li>RDBMS 보다 복합도가 떨어져, 훨씬 대용량의 데이터를 저장, 관리 할 수 있다.</li>
  <li>테이블에 스키마가 정해져있지 않아 데이터 저장이 비교적 자유롭다.</li>
  <li>
    <p>수평적 확장이 어려운 RDBMS보다는 수평적 확장이 쉽다.
단점</p>
  </li>
  <li>스키마가 정해져 있지 않아, 데이터에 대한 규격화가 되어있지 않음.</li>
  <li>DATA를 UPDATE하는데 비교적 느림</li>
  <li>중복된 데이터가 저장될 수 있다.</li>
</ul>

<p>NoSQL에 대한 오해
NoSQL이 등장하면서 기존의 RDBMS의 단점들이 부각되기는 하지만 여전히 RDMB의 성능과 기능은 뛰어나다.</p>

<p>설정과 튜닝을 통해서 NoSQL에 비해 원하는 성능과 확장성을 충분히 갖추고 있다.</p>

<p>NoSQL을 검토할때는 3가지 측면을 고려한다.</p>

<p>데이터의 규모와 데이터의 처리속도 그리고 데이터의 형태이다.</p>

<p>많은 데이터와 빠른 속도로 데이터를 처리하는 것을 다 만족하는 데이터베이스는 없습니다.</p>

<p>인메모리 기반의 데이터베이스는 당연히 속도가 빠르겠지만 확장성에 있어서 한계가 있기 때문에 수십테라바이트, 수백테라바이트의 빅데이터를 다루기에는 적합하지 않습니다.</p>

<p>반면, 빅데이터를 처리하는 경우에는 상대적으로 읽기/쓰기/업데이트등의 성능 및 기능의 제약이 존재합니다.</p>

<p>데이터의 복잡도에 따라서 성능의 차이가 발생하게 됩니다. 단순한 작은 크기의 값을 다루는 key/value 인 경우에는 그 성능이 매우 뛰어난 데이터베이스더라도 처리하는</p>

<p>value의 데이터 크기가 좀 커지고 복잡해지면 성능이 떨어지는 경우도 있지만 NoSQL의 경우에는 좀 더 복잡한 데이터 구조를 수용하면서도 성능을 어느정도 보장해주는것이 있다.</p>

<p>NoSQL들을 보면 메모리를 많이 사용해서 성능도 향상시키면서 확장성도 어느 정도갖추도록 아키텍쳐들이 개선되어 가고 있지만 이를 위해서 필요한 서버의 성능도 올라가야합니다.</p>

<p>이를 위해 서버의 비용도 부담이 되기 때문에 이점도 고려를 해야하는 사항입니다.</p>]]></content><author><name>이승호</name></author><category term="몽고DB" /><category term="NoSQL" /><category term="Blog" /><summary type="html"><![CDATA[몽고DB야 안녕!]]></summary></entry><entry><title type="html">백엔드 개발자 첫 출근 후기 (feat. Node js)</title><link href="http://localhost:4000/til/" rel="alternate" type="text/html" title="백엔드 개발자 첫 출근 후기 (feat. Node js)" /><published>2022-06-21T00:00:00+09:00</published><updated>2022-06-21T00:00:00+09:00</updated><id>http://localhost:4000/til</id><content type="html" xml:base="http://localhost:4000/til/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">아마 생활코딩님이 없었다면 지금의 나도 없지 않을까?</code><br />
코딩이라는 것에 관심이 있었지만<br />
만약 생활코딩님의 입문자들을 위한 영상이 없었더라면,,
입문하기 어렵다는 이유로 개발을 시작하지 않았을지도 모른다.</p>

<p>그렇게 개발 공부를 하면서<br />
사실 직장을 가지게 될 것이라고는 생각하지 않았었다.</p>

<p>그저 재미로 시작한 것일 뿐인데<br />
하다보니 내 생활이 되고 점점 개발은 내게 스며들어왔다.</p>

<p>서론이 너무 길었다!</p>

<p>백엔드 개발자로 이틀을 출근했다.<br />
출근 전 머릿속으로 어떤 모습일지 어떻게 일하게 될 지<br />
상상하고 즐겁게 출근했는데 ㅎㅎ</p>

<p>첫 날은 가자마자 같이 일하게 될 동료분들과 인사를 나누고<br />
포맷된 아이맥 앞에 앉았다.<br />
맥북은 계속 써봤지만 아이맥을 막상 보니 커다란 맥북을 보는 기분이었다.</p>

<p>포맷된 아이맥으로 개발 환경 세팅을 했다.<br />
vscode부터 시작해서 mongodb, postman, webstorm까지<br />
그리고 협업을 위한 슬랙, 깃헙, 지라, 회사 개인 계정을 지급받았다.</p>

<p>아직 회사 내 개발이 어떻게 돌아가는지 잘 모르기 때문에 사실 도메인 이해가 먼저고,<br />
이제 막 도메인이 어떻게 돌아가는지 파악하고있다~~</p>

<p>그래도 node js로 이루어진 백엔드 파트여서 다행이다 싶다가도<br />
몽고DB로 이루어진 DB파트를 보며 알아갈게 생겨서 재밌겠다!라는 생각도 들었다ㅎㅎ</p>

<p>고작 이틀 지났지만 대표님과 회사 동료분들의 인상이 다들 참 좋으시다.<br />
나이대도 나와 비슷해서 친근한 느낌마저 든다 :)</p>

<p>이틀 동안 나가보니 딱 간략하게 정리하자면!!</p>

<p>회사 내 도메인 파악을 끝내고 어서 실무에 투입되서 몰입해보고 싶다!<br />
그리고 역시 공부할 때와 실제로 적용되서 비즈니스로 운영되는 코드를 보는 것은<br />
느낌 자체가 다르다.</p>

<p>실질적으로 사용성이 좋은 코드, 성능에 맞는 코드가 필요하기 때문에<br />
이제 제대로 경기장에 나온 느낌이다 ㅎㅎ</p>

<p>개발 공부를 처음 시작할 때 즈음 블로그에 기록했었던 말이 생각난다.<br />
빠르게 가는 것보다 천천히 한 걸음씩 가자!</p>]]></content><author><name>이승호</name></author><category term="개발자 블로그" /><category term="backend" /><category term="첫 출근" /><category term="Blog" /><summary type="html"><![CDATA[달콤한 9개월 간의 여정]]></summary></entry><entry><title type="html">github.io 블로그 첫 포스팅 :)</title><link href="http://localhost:4000/firstPost/" rel="alternate" type="text/html" title="github.io 블로그 첫 포스팅 :)" /><published>2022-06-20T00:00:00+09:00</published><updated>2022-06-20T00:00:00+09:00</updated><id>http://localhost:4000/firstPost</id><content type="html" xml:base="http://localhost:4000/firstPost/"><![CDATA[<p>내가 사이트로 블로그를 만들다니 너무 신기하다 :)<br />
깃허브 블로그 만드는데 수많은 오류를 만났다,,<br />
그래도 구글링덕분에 잘 해결된 것 같다!<br />
일단 나만의 공간이 생겼으니 자질구레한 것이라도 기록하자 😆<br />
remember!!!<br />
 <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></p>]]></content><author><name>이승호</name></author><category term="Blog" /><summary type="html"><![CDATA[Github Blog 게시글 테스트]]></summary></entry></feed>